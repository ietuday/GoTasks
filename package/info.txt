Ah yes, **packages in Go** — the sacred spellbooks that keep your code from turning into spaghetti 🍝. If Go is a language for engineers, then packages are your toolboxes, your Lego bricks, your **anti-chaos agents**. Modular, organized, reusable — just how mama Go intended.

Let’s crack this one open like a piñata of productivity 🎉

---

## 🧱 What is a Package?

In Go, **a package is a way to organize and reuse code**. Every `.go` file **belongs to a package**.

At the top of your `.go` file, you’ll always see:

```go
package main
```

or

```go
package somecoolname
```

---

### 🔥 Types of Packages

1. **`main` package** — where the `main()` function lives. It's the **entry point** for your program.
2. **Custom/user-defined packages** — your own code modules.
3. **Standard library packages** — Go’s built-in batteries (`fmt`, `os`, `net/http`, etc.)
4. **External packages** — downloaded via `go get` (like `gin`, `gorm`, `cobra`).

---

## 📁 Go Directory Structure & Packages

Let’s say you have:

```
myapp/
│
├── main.go
└── utils/
    └── mathutils.go
```

### `main.go`:

```go
package main

import (
	"fmt"
	"myapp/utils" // <-- custom package import
)

func main() {
	fmt.Println(utils.Add(3, 5))
}
```

### `utils/mathutils.go`:

```go
package utils

func Add(a, b int) int {
	return a + b
}
```

> 💡 Folder name = import path
> File name = doesn't matter
> Package name = declared inside the file

---

## 📦 Standard Library Imports (built-in VIP club)

```go
import (
	"fmt"      // for printing
	"os"       // for OS-level stuff
	"net/http" // for HTTP
)
```

🧠 No need to `go get` these. They come bundled with Go like fries with a combo meal 🍟

---

## 🌍 External Packages (install with `go get`)

```bash
go get github.com/gin-gonic/gin
```

Then:

```go
import "github.com/gin-gonic/gin"
```

Go will auto-add this to your `go.mod` and download it to your `go.sum` (dependency tracker).

---

## 🚀 Exported vs Unexported (the secret sauce)

In Go:

* **Capitalized identifiers are exported** (i.e. public across packages).
* **Lowercase identifiers are unexported** (private to the package).

```go
// utils/mathutils.go
package utils

func Add(a, b int) int { // Exported
	return a + b
}

func subtract(a, b int) int { // Not exported
	return a - b
}
```

Trying to use `utils.subtract()` from `main.go`? You'll get the door slammed in your face 😅

---

## 🧪 Quick Package Rules:

| Rule                        | Meaning                                   |
| --------------------------- | ----------------------------------------- |
| `package main`              | Executable program                        |
| `package somethingElse`     | Reusable library                          |
| Capitalized function/var    | Exported (can be accessed from other pkg) |
| Lowercase function/var      | Internal/private to that package          |
| Folder name = import path   | Used when importing                       |
| `go mod init <module-name>` | Initializes your module                   |

---

## 🧠 Best Practices

✅ Keep related functions together
✅ Avoid circular dependencies
✅ Don’t make one giant “utils” package that does everything (guilty? We all were 😬)
